
Temp_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000009b6  00000a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a6  008000a6  00000a90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ac0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020b0  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c20  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3c  00000000  00000000  0000395c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00004798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a9  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017dc  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	da 01       	movw	r26, r20
  56:	de 01       	movw	r26, r28
  58:	e2 01       	movw	r28, r4
  5a:	e6 01       	movw	r28, r12
  5c:	ea 01       	movw	r28, r20
  5e:	ee 01       	movw	r28, r28
  60:	f2 01       	movw	r30, r4

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e6 eb       	ldi	r30, 0xB6	; 182
  76:	f9 e0       	ldi	r31, 0x09	; 9
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a6 3a       	cpi	r26, 0xA6	; 166
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a6 ea       	ldi	r26, 0xA6	; 166
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	aa 3a       	cpi	r26, 0xAA	; 170
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  98:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <LCD_WriteCommand>:
	DIO_WriteBitsInPort(LCD_PORT,(Data<<4),0xf0);
	DIO_WritePin(EN,HIGH);
	_delay_ms(2);
	DIO_WritePin(EN,LOW);
	_delay_ms(2);
}
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	89 e0       	ldi	r24, 0x09	; 9
  b0:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  b4:	40 ef       	ldi	r20, 0xF0	; 240
  b6:	6c 2f       	mov	r22, r28
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_WriteBitsInPort>
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_WriteCommand+0x2a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_WriteCommand+0x30>
  d0:	00 00       	nop
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_WriteCommand+0x3e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_WriteCommand+0x44>
  e4:	00 00       	nop
  e6:	6c 2f       	mov	r22, r28
  e8:	62 95       	swap	r22
  ea:	60 7f       	andi	r22, 0xF0	; 240
  ec:	40 ef       	ldi	r20, 0xF0	; 240
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_WriteBitsInPort>
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  fc:	83 ef       	ldi	r24, 0xF3	; 243
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_WriteCommand+0x60>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_WriteCommand+0x66>
 106:	00 00       	nop
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 110:	83 ef       	ldi	r24, 0xF3	; 243
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_WriteCommand+0x74>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_WriteCommand+0x7a>
 11a:	00 00       	nop
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	83 ed       	ldi	r24, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Init+0x4>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Init+0xa>
 12a:	00 00       	nop
void LCD_Init(void)
{
	
	_delay_ms(50);          // said in Data sheet to delay after power on for 1st time
	LCD_WriteCommand(0x02);//4 bit mode only
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCommand>
 132:	89 ef       	ldi	r24, 0xF9	; 249
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Init+0x16>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Init+0x1c>
 13c:	00 00       	nop
	_delay_ms(1); 
	LCD_WriteCommand(0x28); //N=1 , F=0
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCommand>
 144:	89 ef       	ldi	r24, 0xF9	; 249
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_Init+0x28>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Init+0x2e>
 14e:	00 00       	nop
	_delay_ms(1);           //delay 1ms a must delay as said in Data sheet
	LCD_WriteCommand(0x0c); //D=1(LCD itself on or off) C=0, B=0
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCommand>
 156:	89 ef       	ldi	r24, 0xF9	; 249
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x3a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x40>
 160:	00 00       	nop
	_delay_ms(1);    //delay 1ms
	LCD_WriteCommand(0x01); //clear LCD
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCommand>
 168:	87 e8       	ldi	r24, 0x87	; 135
 16a:	93 e1       	ldi	r25, 0x13	; 19
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x4c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x52>
 172:	00 00       	nop
	_delay_ms(20);
	LCD_WriteCommand(0x06);
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCommand>
	LCD_WriteCommand(0x80);
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_WriteCommand>
 180:	08 95       	ret

00000182 <SEG_voidDisplayNumber>:
#include "SEG_interface.h"



void SEG_voidDisplayNumber(u8 Copy_u8DisplayID , u8 Copy_u8DisplayNumber)
{
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
	static u8 SEG_DataNumber[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
	
	if(SEG_PINMAP[Copy_u8DisplayID].SEG_MODE == CATHODE)
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e8 0f       	add	r30, r24
 19a:	f9 1f       	adc	r31, r25
 19c:	e0 5a       	subi	r30, 0xA0	; 160
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	20 81       	ld	r18, Z
 1a2:	21 11       	cpse	r18, r1
 1a4:	42 c0       	rjmp	.+132    	; 0x22a <SEG_voidDisplayNumber+0xa8>
	{
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINA , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],0));
 1a6:	e6 2f       	mov	r30, r22
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e5 58       	subi	r30, 0x85	; 133
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	10 81       	ld	r17, Z
 1b0:	61 2f       	mov	r22, r17
 1b2:	61 70       	andi	r22, 0x01	; 1
 1b4:	ec 01       	movw	r28, r24
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	cc 0f       	add	r28, r28
 1bc:	dd 1f       	adc	r29, r29
 1be:	cc 0f       	add	r28, r28
 1c0:	dd 1f       	adc	r29, r29
 1c2:	8c 0f       	add	r24, r28
 1c4:	9d 1f       	adc	r25, r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	c0 5a       	subi	r28, 0xA0	; 160
 1ca:	df 4f       	sbci	r29, 0xFF	; 255
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINB , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],1));
 1d2:	11 fb       	bst	r17, 1
 1d4:	66 27       	eor	r22, r22
 1d6:	60 f9       	bld	r22, 0
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINC , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],2));
 1de:	12 fb       	bst	r17, 2
 1e0:	66 27       	eor	r22, r22
 1e2:	60 f9       	bld	r22, 0
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PIND , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],3));
 1ea:	13 fb       	bst	r17, 3
 1ec:	66 27       	eor	r22, r22
 1ee:	60 f9       	bld	r22, 0
 1f0:	8c 81       	ldd	r24, Y+4	; 0x04
 1f2:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINE , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],4));
 1f6:	14 fb       	bst	r17, 4
 1f8:	66 27       	eor	r22, r22
 1fa:	60 f9       	bld	r22, 0
 1fc:	8d 81       	ldd	r24, Y+5	; 0x05
 1fe:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINF , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],5));
 202:	15 fb       	bst	r17, 5
 204:	66 27       	eor	r22, r22
 206:	60 f9       	bld	r22, 0
 208:	8e 81       	ldd	r24, Y+6	; 0x06
 20a:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PING , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],6));
 20e:	16 fb       	bst	r17, 6
 210:	66 27       	eor	r22, r22
 212:	60 f9       	bld	r22, 0
 214:	8f 81       	ldd	r24, Y+7	; 0x07
 216:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINDot , CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],7));
 21a:	61 2f       	mov	r22, r17
 21c:	66 1f       	adc	r22, r22
 21e:	66 27       	eor	r22, r22
 220:	66 1f       	adc	r22, r22
 222:	88 85       	ldd	r24, Y+8	; 0x08
 224:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 228:	4c c0       	rjmp	.+152    	; 0x2c2 <SEG_voidDisplayNumber+0x140>
	}
	else if(SEG_PINMAP[Copy_u8DisplayID].SEG_MODE == ANODE)
 22a:	21 30       	cpi	r18, 0x01	; 1
 22c:	09 f0       	breq	.+2      	; 0x230 <SEG_voidDisplayNumber+0xae>
 22e:	49 c0       	rjmp	.+146    	; 0x2c2 <SEG_voidDisplayNumber+0x140>
	{
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINA , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],0));
 230:	e6 2f       	mov	r30, r22
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e5 58       	subi	r30, 0x85	; 133
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	10 81       	ld	r17, Z
 23a:	61 2f       	mov	r22, r17
 23c:	61 70       	andi	r22, 0x01	; 1
 23e:	60 95       	com	r22
 240:	ec 01       	movw	r28, r24
 242:	cc 0f       	add	r28, r28
 244:	dd 1f       	adc	r29, r29
 246:	cc 0f       	add	r28, r28
 248:	dd 1f       	adc	r29, r29
 24a:	cc 0f       	add	r28, r28
 24c:	dd 1f       	adc	r29, r29
 24e:	8c 0f       	add	r24, r28
 250:	9d 1f       	adc	r25, r29
 252:	ec 01       	movw	r28, r24
 254:	c0 5a       	subi	r28, 0xA0	; 160
 256:	df 4f       	sbci	r29, 0xFF	; 255
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINB , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],1));
 25e:	11 fb       	bst	r17, 1
 260:	66 27       	eor	r22, r22
 262:	60 f9       	bld	r22, 0
 264:	60 95       	com	r22
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINC , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],2));
 26c:	12 fb       	bst	r17, 2
 26e:	66 27       	eor	r22, r22
 270:	60 f9       	bld	r22, 0
 272:	60 95       	com	r22
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PIND , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],3));
 27a:	13 fb       	bst	r17, 3
 27c:	66 27       	eor	r22, r22
 27e:	60 f9       	bld	r22, 0
 280:	60 95       	com	r22
 282:	8c 81       	ldd	r24, Y+4	; 0x04
 284:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINE , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],4));
 288:	14 fb       	bst	r17, 4
 28a:	66 27       	eor	r22, r22
 28c:	60 f9       	bld	r22, 0
 28e:	60 95       	com	r22
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINF , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],5));
 296:	15 fb       	bst	r17, 5
 298:	66 27       	eor	r22, r22
 29a:	60 f9       	bld	r22, 0
 29c:	60 95       	com	r22
 29e:	8e 81       	ldd	r24, Y+6	; 0x06
 2a0:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PING , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],6));
 2a4:	16 fb       	bst	r17, 6
 2a6:	66 27       	eor	r22, r22
 2a8:	60 f9       	bld	r22, 0
 2aa:	60 95       	com	r22
 2ac:	8f 81       	ldd	r24, Y+7	; 0x07
 2ae:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
		DIO_WritePin(SEG_PINMAP[Copy_u8DisplayID].SEG_PINDot , ~CHECK_BIT(SEG_DataNumber[Copy_u8DisplayNumber],7));
 2b2:	61 2f       	mov	r22, r17
 2b4:	66 1f       	adc	r22, r22
 2b6:	66 27       	eor	r22, r22
 2b8:	66 1f       	adc	r22, r22
 2ba:	60 95       	com	r22
 2bc:	88 85       	ldd	r24, Y+8	; 0x08
 2be:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
	}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	08 95       	ret

000002ca <main>:
#include "ADC_interface.h"
#include "LCD_interface.h"

int main(void)
{
	DIO_Init();
 2ca:	0e 94 19 02 	call	0x432	; 0x432 <DIO_Init>
	LCD_Init();
 2ce:	0e 94 90 00 	call	0x120	; 0x120 <LCD_Init>
	adc_init(divfact64 , EXTERNALAVCC);
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	0e 94 9a 01 	call	0x334	; 0x334 <adc_init>
		LCD_WriteNumber(x);
		_delay_ms(500);
		LCD_Clear();*/
		
	   /* task 2*/
	   int temp=(adc_read_voltage(ADC4))*101;
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	0e 94 01 02 	call	0x402	; 0x402 <adc_read_voltage>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	4a ec       	ldi	r20, 0xCA	; 202
 2e6:	52 e4       	ldi	r21, 0x42	; 66
 2e8:	0e 94 3e 04 	call	0x87c	; 0x87c <__mulsf3>
 2ec:	0e 94 a2 03 	call	0x744	; 0x744 <__fixsfsi>
	   if (temp>50)
 2f0:	63 33       	cpi	r22, 0x33	; 51
 2f2:	71 05       	cpc	r23, r1
 2f4:	ac f0       	brlt	.+42     	; 0x320 <main+0x56>
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
	   {
		  for(int i=0;i<=5;i++)
		  { SEG_voidDisplayNumber( 0 , i);
 2fa:	be 01       	movw	r22, r28
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 c1 00 	call	0x182	; 0x182 <SEG_voidDisplayNumber>
 304:	2f e3       	ldi	r18, 0x3F	; 63
 306:	8d e0       	ldi	r24, 0x0D	; 13
 308:	93 e0       	ldi	r25, 0x03	; 3
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x40>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x4a>
 314:	00 00       	nop
		
	   /* task 2*/
	   int temp=(adc_read_voltage(ADC4))*101;
	   if (temp>50)
	   {
		  for(int i=0;i<=5;i++)
 316:	21 96       	adiw	r28, 0x01	; 1
 318:	c6 30       	cpi	r28, 0x06	; 6
 31a:	d1 05       	cpc	r29, r1
 31c:	71 f7       	brne	.-36     	; 0x2fa <main+0x30>
 31e:	dd cf       	rjmp	.-70     	; 0x2da <main+0x10>
		  { SEG_voidDisplayNumber( 0 , i);
			  _delay_ms(1000);
		  }
	   }
	   else if (temp<50)
 320:	62 33       	cpi	r22, 0x32	; 50
 322:	71 05       	cpc	r23, r1
 324:	d4 f6       	brge	.-76     	; 0x2da <main+0x10>
	   {
		    SEG_voidDisplayNumber( 0 , 0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 c1 00 	call	0x182	; 0x182 <SEG_voidDisplayNumber>
 332:	d3 cf       	rjmp	.-90     	; 0x2da <main+0x10>

00000334 <adc_init>:
#include "ADC_interface.h"

static float vref=0;
void adc_init(division_factor fact,used_voltage used)
{
 334:	e8 2f       	mov	r30, r24
	adc_enable;
 336:	37 9a       	sbi	0x06, 7	; 6
	switch(used)
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	19 f1       	breq	.+70     	; 0x382 <adc_init+0x4e>
 33c:	18 f0       	brcs	.+6      	; 0x344 <adc_init+0x10>
 33e:	62 30       	cpi	r22, 0x02	; 2
 340:	89 f0       	breq	.+34     	; 0x364 <adc_init+0x30>
 342:	2e c0       	rjmp	.+92     	; 0x3a0 <adc_init+0x6c>
	{
		case internal:     vref=2.56;     INTERNAL_VOLTAGES; break;
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	97 ed       	ldi	r25, 0xD7	; 215
 348:	a3 e2       	ldi	r26, 0x23	; 35
 34a:	b0 e4       	ldi	r27, 0x40	; 64
 34c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 350:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
 354:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
 358:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
 35c:	87 b1       	in	r24, 0x07	; 7
 35e:	80 6c       	ori	r24, 0xC0	; 192
 360:	87 b9       	out	0x07, r24	; 7
 362:	1e c0       	rjmp	.+60     	; 0x3a0 <adc_init+0x6c>
		case EXTERNALAVCC: vref=5;        AVCC_VOLTAGES;     break;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	a0 ea       	ldi	r26, 0xA0	; 160
 36a:	b0 e4       	ldi	r27, 0x40	; 64
 36c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 370:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
 374:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
 378:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
 37c:	3e 9a       	sbi	0x07, 6	; 7
 37e:	3f 98       	cbi	0x07, 7	; 7
 380:	0f c0       	rjmp	.+30     	; 0x3a0 <adc_init+0x6c>
		case EXTERNALAREF: vref=5;        AREF_VOLTAGES;     break;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a0 ea       	ldi	r26, 0xA0	; 160
 388:	b0 e4       	ldi	r27, 0x40	; 64
 38a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 38e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
 392:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
 396:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
 39a:	87 b1       	in	r24, 0x07	; 7
 39c:	8f 73       	andi	r24, 0x3F	; 63
 39e:	87 b9       	out	0x07, r24	; 7
	}
	
	switch(fact)
 3a0:	8e 2f       	mov	r24, r30
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	87 30       	cpi	r24, 0x07	; 7
 3a6:	91 05       	cpc	r25, r1
 3a8:	00 f5       	brcc	.+64     	; 0x3ea <adc_init+0xb6>
 3aa:	fc 01       	movw	r30, r24
 3ac:	e6 5d       	subi	r30, 0xD6	; 214
 3ae:	ff 4f       	sbci	r31, 0xFF	; 255
 3b0:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__tablejump2__>
	{
		case divfact2:          divisionfactor2;break;
 3b4:	30 98       	cbi	0x06, 0	; 6
 3b6:	31 98       	cbi	0x06, 1	; 6
 3b8:	32 98       	cbi	0x06, 2	; 6
 3ba:	08 95       	ret
		case divfact4:          divisionfactor4;break;
 3bc:	30 98       	cbi	0x06, 0	; 6
 3be:	31 9a       	sbi	0x06, 1	; 6
 3c0:	32 98       	cbi	0x06, 2	; 6
 3c2:	08 95       	ret
		case divfact8:          divisionfactor8;break;
 3c4:	30 9a       	sbi	0x06, 0	; 6
 3c6:	31 9a       	sbi	0x06, 1	; 6
 3c8:	32 98       	cbi	0x06, 2	; 6
 3ca:	08 95       	ret
		case divfact16:         divisionfactor16;break;
 3cc:	30 98       	cbi	0x06, 0	; 6
 3ce:	31 98       	cbi	0x06, 1	; 6
 3d0:	32 9a       	sbi	0x06, 2	; 6
 3d2:	08 95       	ret
		case divfact32:         divisionfactor32;break;
 3d4:	30 9a       	sbi	0x06, 0	; 6
 3d6:	31 98       	cbi	0x06, 1	; 6
 3d8:	32 9a       	sbi	0x06, 2	; 6
 3da:	08 95       	ret
		case divfact64:         divisionfactor64;break;
 3dc:	30 98       	cbi	0x06, 0	; 6
 3de:	31 9a       	sbi	0x06, 1	; 6
 3e0:	32 9a       	sbi	0x06, 2	; 6
 3e2:	08 95       	ret
		case divfact128:        divisionfactor128;break;
 3e4:	30 9a       	sbi	0x06, 0	; 6
 3e6:	31 9a       	sbi	0x06, 1	; 6
 3e8:	32 9a       	sbi	0x06, 2	; 6
 3ea:	08 95       	ret

000003ec <adc_read>:
	}
}

u16 adc_read(INPUT_pins adc_pin)
{   unsigned short read_val;
	selected_pin(adc_pin);
 3ec:	97 b1       	in	r25, 0x07	; 7
 3ee:	90 7e       	andi	r25, 0xE0	; 224
 3f0:	8f 71       	andi	r24, 0x1F	; 31
 3f2:	89 2b       	or	r24, r25
 3f4:	87 b9       	out	0x07, r24	; 7
	adc_startconversion;
 3f6:	36 9a       	sbi	0x06, 6	; 6
	while(ADIF==0){};
	read_val=(ADCL);
 3f8:	84 b1       	in	r24, 0x04	; 4
	read_val|=(ADCH<<8);	
 3fa:	25 b1       	in	r18, 0x05	; 5
	return read_val;
 3fc:	90 e0       	ldi	r25, 0x00	; 0
}
 3fe:	92 2b       	or	r25, r18
 400:	08 95       	ret

00000402 <adc_read_voltage>:
float adc_read_voltage(INPUT_pins adc_pin)
{
	float adc_val=adc_read(adc_pin);
 402:	0e 94 f6 01 	call	0x3ec	; 0x3ec <adc_read>
	adc_val=(adc_val*vref)/1024;
 406:	bc 01       	movw	r22, r24
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__floatunsisf>
 410:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__data_end>
 414:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__data_end+0x1>
 418:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <__data_end+0x2>
 41c:	50 91 a9 00 	lds	r21, 0x00A9	; 0x8000a9 <__data_end+0x3>
 420:	0e 94 3e 04 	call	0x87c	; 0x87c <__mulsf3>
	return adc_val;
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e8       	ldi	r20, 0x80	; 128
 42a:	5a e3       	ldi	r21, 0x3A	; 58
 42c:	0e 94 3e 04 	call	0x87c	; 0x87c <__mulsf3>
}
 430:	08 95       	ret

00000432 <DIO_Init>:
		break;
		default:
		return 0x00;
		break;
	}
}
 432:	e5 e8       	ldi	r30, 0x85	; 133
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	91 91       	ld	r25, Z+
 43e:	28 2f       	mov	r18, r24
 440:	26 95       	lsr	r18
 442:	26 95       	lsr	r18
 444:	26 95       	lsr	r18
 446:	38 2f       	mov	r19, r24
 448:	37 70       	andi	r19, 0x07	; 7
 44a:	91 30       	cpi	r25, 0x01	; 1
 44c:	c9 f1       	breq	.+114    	; 0x4c0 <DIO_Init+0x8e>
 44e:	20 f0       	brcs	.+8      	; 0x458 <DIO_Init+0x26>
 450:	92 30       	cpi	r25, 0x02	; 2
 452:	09 f4       	brne	.+2      	; 0x456 <DIO_Init+0x24>
 454:	7d c0       	rjmp	.+250    	; 0x550 <DIO_Init+0x11e>
 456:	bf c0       	rjmp	.+382    	; 0x5d6 <DIO_Init+0x1a4>
 458:	21 30       	cpi	r18, 0x01	; 1
 45a:	89 f0       	breq	.+34     	; 0x47e <DIO_Init+0x4c>
 45c:	28 f0       	brcs	.+10     	; 0x468 <DIO_Init+0x36>
 45e:	22 30       	cpi	r18, 0x02	; 2
 460:	c9 f0       	breq	.+50     	; 0x494 <DIO_Init+0x62>
 462:	23 30       	cpi	r18, 0x03	; 3
 464:	11 f1       	breq	.+68     	; 0x4aa <DIO_Init+0x78>
 466:	b7 c0       	rjmp	.+366    	; 0x5d6 <DIO_Init+0x1a4>
 468:	9a b3       	in	r25, 0x1a	; 26
 46a:	ba 01       	movw	r22, r20
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_Init+0x40>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	3a 95       	dec	r19
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_Init+0x3c>
 476:	9b 01       	movw	r18, r22
 478:	29 2b       	or	r18, r25
 47a:	2a bb       	out	0x1a, r18	; 26
 47c:	ac c0       	rjmp	.+344    	; 0x5d6 <DIO_Init+0x1a4>
 47e:	97 b3       	in	r25, 0x17	; 23
 480:	ba 01       	movw	r22, r20
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_Init+0x56>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	3a 95       	dec	r19
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_Init+0x52>
 48c:	9b 01       	movw	r18, r22
 48e:	29 2b       	or	r18, r25
 490:	27 bb       	out	0x17, r18	; 23
 492:	a1 c0       	rjmp	.+322    	; 0x5d6 <DIO_Init+0x1a4>
 494:	94 b3       	in	r25, 0x14	; 20
 496:	ba 01       	movw	r22, r20
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_Init+0x6c>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	3a 95       	dec	r19
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_Init+0x68>
 4a2:	9b 01       	movw	r18, r22
 4a4:	29 2b       	or	r18, r25
 4a6:	24 bb       	out	0x14, r18	; 20
 4a8:	96 c0       	rjmp	.+300    	; 0x5d6 <DIO_Init+0x1a4>
 4aa:	91 b3       	in	r25, 0x11	; 17
 4ac:	ba 01       	movw	r22, r20
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_Init+0x82>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	3a 95       	dec	r19
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_Init+0x7e>
 4b8:	9b 01       	movw	r18, r22
 4ba:	29 2b       	or	r18, r25
 4bc:	21 bb       	out	0x11, r18	; 17
 4be:	8b c0       	rjmp	.+278    	; 0x5d6 <DIO_Init+0x1a4>
 4c0:	21 30       	cpi	r18, 0x01	; 1
 4c2:	b1 f0       	breq	.+44     	; 0x4f0 <DIO_Init+0xbe>
 4c4:	28 f0       	brcs	.+10     	; 0x4d0 <DIO_Init+0x9e>
 4c6:	22 30       	cpi	r18, 0x02	; 2
 4c8:	19 f1       	breq	.+70     	; 0x510 <DIO_Init+0xde>
 4ca:	23 30       	cpi	r18, 0x03	; 3
 4cc:	89 f1       	breq	.+98     	; 0x530 <DIO_Init+0xfe>
 4ce:	83 c0       	rjmp	.+262    	; 0x5d6 <DIO_Init+0x1a4>
 4d0:	9a b3       	in	r25, 0x1a	; 26
 4d2:	ba 01       	movw	r22, r20
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_Init+0xa8>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	3a 95       	dec	r19
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_Init+0xa4>
 4de:	9b 01       	movw	r18, r22
 4e0:	36 2f       	mov	r19, r22
 4e2:	30 95       	com	r19
 4e4:	93 23       	and	r25, r19
 4e6:	9a bb       	out	0x1a, r25	; 26
 4e8:	9b b3       	in	r25, 0x1b	; 27
 4ea:	29 2b       	or	r18, r25
 4ec:	2b bb       	out	0x1b, r18	; 27
 4ee:	73 c0       	rjmp	.+230    	; 0x5d6 <DIO_Init+0x1a4>
 4f0:	97 b3       	in	r25, 0x17	; 23
 4f2:	ba 01       	movw	r22, r20
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_Init+0xc8>
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	3a 95       	dec	r19
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_Init+0xc4>
 4fe:	9b 01       	movw	r18, r22
 500:	36 2f       	mov	r19, r22
 502:	30 95       	com	r19
 504:	93 23       	and	r25, r19
 506:	97 bb       	out	0x17, r25	; 23
 508:	98 b3       	in	r25, 0x18	; 24
 50a:	29 2b       	or	r18, r25
 50c:	28 bb       	out	0x18, r18	; 24
 50e:	63 c0       	rjmp	.+198    	; 0x5d6 <DIO_Init+0x1a4>
 510:	94 b3       	in	r25, 0x14	; 20
 512:	ba 01       	movw	r22, r20
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_Init+0xe8>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	3a 95       	dec	r19
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_Init+0xe4>
 51e:	9b 01       	movw	r18, r22
 520:	36 2f       	mov	r19, r22
 522:	30 95       	com	r19
 524:	93 23       	and	r25, r19
 526:	94 bb       	out	0x14, r25	; 20
 528:	95 b3       	in	r25, 0x15	; 21
 52a:	29 2b       	or	r18, r25
 52c:	25 bb       	out	0x15, r18	; 21
 52e:	53 c0       	rjmp	.+166    	; 0x5d6 <DIO_Init+0x1a4>
 530:	91 b3       	in	r25, 0x11	; 17
 532:	ba 01       	movw	r22, r20
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_Init+0x108>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	3a 95       	dec	r19
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_Init+0x104>
 53e:	9b 01       	movw	r18, r22
 540:	36 2f       	mov	r19, r22
 542:	30 95       	com	r19
 544:	93 23       	and	r25, r19
 546:	91 bb       	out	0x11, r25	; 17
 548:	92 b3       	in	r25, 0x12	; 18
 54a:	29 2b       	or	r18, r25
 54c:	22 bb       	out	0x12, r18	; 18
 54e:	43 c0       	rjmp	.+134    	; 0x5d6 <DIO_Init+0x1a4>
 550:	21 30       	cpi	r18, 0x01	; 1
 552:	a9 f0       	breq	.+42     	; 0x57e <DIO_Init+0x14c>
 554:	28 f0       	brcs	.+10     	; 0x560 <DIO_Init+0x12e>
 556:	22 30       	cpi	r18, 0x02	; 2
 558:	09 f1       	breq	.+66     	; 0x59c <DIO_Init+0x16a>
 55a:	23 30       	cpi	r18, 0x03	; 3
 55c:	71 f1       	breq	.+92     	; 0x5ba <DIO_Init+0x188>
 55e:	3b c0       	rjmp	.+118    	; 0x5d6 <DIO_Init+0x1a4>
 560:	9a b3       	in	r25, 0x1a	; 26
 562:	ba 01       	movw	r22, r20
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_Init+0x138>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	3a 95       	dec	r19
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_Init+0x134>
 56e:	9b 01       	movw	r18, r22
 570:	20 95       	com	r18
 572:	92 23       	and	r25, r18
 574:	9a bb       	out	0x1a, r25	; 26
 576:	9b b3       	in	r25, 0x1b	; 27
 578:	29 23       	and	r18, r25
 57a:	2b bb       	out	0x1b, r18	; 27
 57c:	2c c0       	rjmp	.+88     	; 0x5d6 <DIO_Init+0x1a4>
 57e:	97 b3       	in	r25, 0x17	; 23
 580:	ba 01       	movw	r22, r20
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_Init+0x156>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	3a 95       	dec	r19
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_Init+0x152>
 58c:	9b 01       	movw	r18, r22
 58e:	20 95       	com	r18
 590:	92 23       	and	r25, r18
 592:	97 bb       	out	0x17, r25	; 23
 594:	98 b3       	in	r25, 0x18	; 24
 596:	29 23       	and	r18, r25
 598:	28 bb       	out	0x18, r18	; 24
 59a:	1d c0       	rjmp	.+58     	; 0x5d6 <DIO_Init+0x1a4>
 59c:	94 b3       	in	r25, 0x14	; 20
 59e:	ba 01       	movw	r22, r20
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_Init+0x174>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	3a 95       	dec	r19
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_Init+0x170>
 5aa:	9b 01       	movw	r18, r22
 5ac:	20 95       	com	r18
 5ae:	92 23       	and	r25, r18
 5b0:	94 bb       	out	0x14, r25	; 20
 5b2:	95 b3       	in	r25, 0x15	; 21
 5b4:	29 23       	and	r18, r25
 5b6:	25 bb       	out	0x15, r18	; 21
 5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <DIO_Init+0x1a4>
 5ba:	91 b3       	in	r25, 0x11	; 17
 5bc:	ba 01       	movw	r22, r20
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_Init+0x192>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	3a 95       	dec	r19
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_Init+0x18e>
 5c8:	9b 01       	movw	r18, r22
 5ca:	20 95       	com	r18
 5cc:	92 23       	and	r25, r18
 5ce:	91 bb       	out	0x11, r25	; 17
 5d0:	92 b3       	in	r25, 0x12	; 18
 5d2:	29 23       	and	r18, r25
 5d4:	22 bb       	out	0x12, r18	; 18
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	80 32       	cpi	r24, 0x20	; 32
 5da:	09 f0       	breq	.+2      	; 0x5de <DIO_Init+0x1ac>
 5dc:	2f cf       	rjmp	.-418    	; 0x43c <DIO_Init+0xa>
 5de:	08 95       	ret

000005e0 <DIO_WriteBitsInPort>:
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	81 f0       	breq	.+32     	; 0x604 <DIO_WriteBitsInPort+0x24>
 5e4:	28 f0       	brcs	.+10     	; 0x5f0 <DIO_WriteBitsInPort+0x10>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	b9 f0       	breq	.+46     	; 0x618 <DIO_WriteBitsInPort+0x38>
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	f9 f0       	breq	.+62     	; 0x62c <DIO_WriteBitsInPort+0x4c>
 5ee:	08 95       	ret
 5f0:	8b b3       	in	r24, 0x1b	; 27
 5f2:	94 2f       	mov	r25, r20
 5f4:	90 95       	com	r25
 5f6:	89 23       	and	r24, r25
 5f8:	8b bb       	out	0x1b, r24	; 27
 5fa:	8b b3       	in	r24, 0x1b	; 27
 5fc:	64 23       	and	r22, r20
 5fe:	68 2b       	or	r22, r24
 600:	6b bb       	out	0x1b, r22	; 27
 602:	08 95       	ret
 604:	88 b3       	in	r24, 0x18	; 24
 606:	94 2f       	mov	r25, r20
 608:	90 95       	com	r25
 60a:	89 23       	and	r24, r25
 60c:	88 bb       	out	0x18, r24	; 24
 60e:	88 b3       	in	r24, 0x18	; 24
 610:	64 23       	and	r22, r20
 612:	68 2b       	or	r22, r24
 614:	68 bb       	out	0x18, r22	; 24
 616:	08 95       	ret
 618:	85 b3       	in	r24, 0x15	; 21
 61a:	94 2f       	mov	r25, r20
 61c:	90 95       	com	r25
 61e:	89 23       	and	r24, r25
 620:	85 bb       	out	0x15, r24	; 21
 622:	85 b3       	in	r24, 0x15	; 21
 624:	64 23       	and	r22, r20
 626:	68 2b       	or	r22, r24
 628:	65 bb       	out	0x15, r22	; 21
 62a:	08 95       	ret
 62c:	82 b3       	in	r24, 0x12	; 18
 62e:	94 2f       	mov	r25, r20
 630:	90 95       	com	r25
 632:	89 23       	and	r24, r25
 634:	82 bb       	out	0x12, r24	; 18
 636:	82 b3       	in	r24, 0x12	; 18
 638:	64 23       	and	r22, r20
 63a:	68 2b       	or	r22, r24
 63c:	62 bb       	out	0x12, r22	; 18
 63e:	08 95       	ret

00000640 <DIO_WritePin>:
void DIO_WritePin(PinNum_type Pin,VoltageLevel_type Value)
{
	u8 PinNum_InPort=Pin%8;
 640:	98 2f       	mov	r25, r24
 642:	97 70       	andi	r25, 0x07	; 7
	Port_type Port=Pin/8;
	switch (Port)
 644:	86 95       	lsr	r24
 646:	86 95       	lsr	r24
 648:	86 95       	lsr	r24
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	21 f1       	breq	.+72     	; 0x696 <DIO_WritePin+0x56>
 64e:	30 f0       	brcs	.+12     	; 0x65c <DIO_WritePin+0x1c>
 650:	82 30       	cpi	r24, 0x02	; 2
 652:	f1 f1       	breq	.+124    	; 0x6d0 <DIO_WritePin+0x90>
 654:	83 30       	cpi	r24, 0x03	; 3
 656:	09 f4       	brne	.+2      	; 0x65a <DIO_WritePin+0x1a>
 658:	58 c0       	rjmp	.+176    	; 0x70a <DIO_WritePin+0xca>
 65a:	08 95       	ret
	{
		case PA:
		if (HIGH==Value)
 65c:	61 30       	cpi	r22, 0x01	; 1
 65e:	69 f4       	brne	.+26     	; 0x67a <DIO_WritePin+0x3a>
		{
			SET_BIT(PORTA,PinNum_InPort);
 660:	4b b3       	in	r20, 0x1b	; 27
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	b9 01       	movw	r22, r18
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_WritePin+0x2e>
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	9a 95       	dec	r25
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_WritePin+0x2a>
 672:	cb 01       	movw	r24, r22
 674:	84 2b       	or	r24, r20
 676:	8b bb       	out	0x1b, r24	; 27
 678:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum_InPort);
 67a:	4b b3       	in	r20, 0x1b	; 27
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	b9 01       	movw	r22, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_WritePin+0x48>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	9a 95       	dec	r25
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_WritePin+0x44>
 68c:	cb 01       	movw	r24, r22
 68e:	80 95       	com	r24
 690:	84 23       	and	r24, r20
 692:	8b bb       	out	0x1b, r24	; 27
 694:	08 95       	ret
		}
		break;
		case PB:
		if (HIGH==Value)
 696:	61 30       	cpi	r22, 0x01	; 1
 698:	69 f4       	brne	.+26     	; 0x6b4 <DIO_WritePin+0x74>
		{
			SET_BIT(PORTB,PinNum_InPort);
 69a:	48 b3       	in	r20, 0x18	; 24
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	b9 01       	movw	r22, r18
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_WritePin+0x68>
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	9a 95       	dec	r25
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_WritePin+0x64>
 6ac:	cb 01       	movw	r24, r22
 6ae:	84 2b       	or	r24, r20
 6b0:	88 bb       	out	0x18, r24	; 24
 6b2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,PinNum_InPort);
 6b4:	48 b3       	in	r20, 0x18	; 24
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	b9 01       	movw	r22, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_WritePin+0x82>
 6be:	66 0f       	add	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	9a 95       	dec	r25
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_WritePin+0x7e>
 6c6:	cb 01       	movw	r24, r22
 6c8:	80 95       	com	r24
 6ca:	84 23       	and	r24, r20
 6cc:	88 bb       	out	0x18, r24	; 24
 6ce:	08 95       	ret
		}
		break;
		case PC:
		if (HIGH==Value)
 6d0:	61 30       	cpi	r22, 0x01	; 1
 6d2:	69 f4       	brne	.+26     	; 0x6ee <DIO_WritePin+0xae>
		{
			SET_BIT(PORTC,PinNum_InPort);
 6d4:	45 b3       	in	r20, 0x15	; 21
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	b9 01       	movw	r22, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_WritePin+0xa2>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	9a 95       	dec	r25
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_WritePin+0x9e>
 6e6:	cb 01       	movw	r24, r22
 6e8:	84 2b       	or	r24, r20
 6ea:	85 bb       	out	0x15, r24	; 21
 6ec:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,PinNum_InPort);
 6ee:	45 b3       	in	r20, 0x15	; 21
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	b9 01       	movw	r22, r18
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_WritePin+0xbc>
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	9a 95       	dec	r25
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_WritePin+0xb8>
 700:	cb 01       	movw	r24, r22
 702:	80 95       	com	r24
 704:	84 23       	and	r24, r20
 706:	85 bb       	out	0x15, r24	; 21
 708:	08 95       	ret
		}
		break;
		case PD:
		if (HIGH==Value)
 70a:	61 30       	cpi	r22, 0x01	; 1
 70c:	69 f4       	brne	.+26     	; 0x728 <DIO_WritePin+0xe8>
		{
			SET_BIT(PORTD,PinNum_InPort);
 70e:	42 b3       	in	r20, 0x12	; 18
 710:	21 e0       	ldi	r18, 0x01	; 1
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	b9 01       	movw	r22, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_WritePin+0xdc>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	9a 95       	dec	r25
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_WritePin+0xd8>
 720:	cb 01       	movw	r24, r22
 722:	84 2b       	or	r24, r20
 724:	82 bb       	out	0x12, r24	; 18
 726:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,PinNum_InPort);
 728:	42 b3       	in	r20, 0x12	; 18
 72a:	21 e0       	ldi	r18, 0x01	; 1
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	b9 01       	movw	r22, r18
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_WritePin+0xf6>
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	9a 95       	dec	r25
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_WritePin+0xf2>
 73a:	cb 01       	movw	r24, r22
 73c:	80 95       	com	r24
 73e:	84 23       	and	r24, r20
 740:	82 bb       	out	0x12, r24	; 18
 742:	08 95       	ret

00000744 <__fixsfsi>:
 744:	0e 94 a9 03 	call	0x752	; 0x752 <__fixunssfsi>
 748:	68 94       	set
 74a:	b1 11       	cpse	r27, r1
 74c:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>
 750:	08 95       	ret

00000752 <__fixunssfsi>:
 752:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_splitA>
 756:	88 f0       	brcs	.+34     	; 0x77a <__fixunssfsi+0x28>
 758:	9f 57       	subi	r25, 0x7F	; 127
 75a:	98 f0       	brcs	.+38     	; 0x782 <__fixunssfsi+0x30>
 75c:	b9 2f       	mov	r27, r25
 75e:	99 27       	eor	r25, r25
 760:	b7 51       	subi	r27, 0x17	; 23
 762:	b0 f0       	brcs	.+44     	; 0x790 <__fixunssfsi+0x3e>
 764:	e1 f0       	breq	.+56     	; 0x79e <__fixunssfsi+0x4c>
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	1a f0       	brmi	.+6      	; 0x776 <__fixunssfsi+0x24>
 770:	ba 95       	dec	r27
 772:	c9 f7       	brne	.-14     	; 0x766 <__fixunssfsi+0x14>
 774:	14 c0       	rjmp	.+40     	; 0x79e <__fixunssfsi+0x4c>
 776:	b1 30       	cpi	r27, 0x01	; 1
 778:	91 f0       	breq	.+36     	; 0x79e <__fixunssfsi+0x4c>
 77a:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_zero>
 77e:	b1 e0       	ldi	r27, 0x01	; 1
 780:	08 95       	ret
 782:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_zero>
 786:	67 2f       	mov	r22, r23
 788:	78 2f       	mov	r23, r24
 78a:	88 27       	eor	r24, r24
 78c:	b8 5f       	subi	r27, 0xF8	; 248
 78e:	39 f0       	breq	.+14     	; 0x79e <__fixunssfsi+0x4c>
 790:	b9 3f       	cpi	r27, 0xF9	; 249
 792:	cc f3       	brlt	.-14     	; 0x786 <__fixunssfsi+0x34>
 794:	86 95       	lsr	r24
 796:	77 95       	ror	r23
 798:	67 95       	ror	r22
 79a:	b3 95       	inc	r27
 79c:	d9 f7       	brne	.-10     	; 0x794 <__fixunssfsi+0x42>
 79e:	3e f4       	brtc	.+14     	; 0x7ae <__fixunssfsi+0x5c>
 7a0:	90 95       	com	r25
 7a2:	80 95       	com	r24
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	08 95       	ret

000007b0 <__floatunsisf>:
 7b0:	e8 94       	clt
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <__floatsisf+0x12>

000007b4 <__floatsisf>:
 7b4:	97 fb       	bst	r25, 7
 7b6:	3e f4       	brtc	.+14     	; 0x7c6 <__floatsisf+0x12>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	99 23       	and	r25, r25
 7c8:	a9 f0       	breq	.+42     	; 0x7f4 <__floatsisf+0x40>
 7ca:	f9 2f       	mov	r31, r25
 7cc:	96 e9       	ldi	r25, 0x96	; 150
 7ce:	bb 27       	eor	r27, r27
 7d0:	93 95       	inc	r25
 7d2:	f6 95       	lsr	r31
 7d4:	87 95       	ror	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	b7 95       	ror	r27
 7dc:	f1 11       	cpse	r31, r1
 7de:	f8 cf       	rjmp	.-16     	; 0x7d0 <__floatsisf+0x1c>
 7e0:	fa f4       	brpl	.+62     	; 0x820 <__floatsisf+0x6c>
 7e2:	bb 0f       	add	r27, r27
 7e4:	11 f4       	brne	.+4      	; 0x7ea <__floatsisf+0x36>
 7e6:	60 ff       	sbrs	r22, 0
 7e8:	1b c0       	rjmp	.+54     	; 0x820 <__floatsisf+0x6c>
 7ea:	6f 5f       	subi	r22, 0xFF	; 255
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	16 c0       	rjmp	.+44     	; 0x820 <__floatsisf+0x6c>
 7f4:	88 23       	and	r24, r24
 7f6:	11 f0       	breq	.+4      	; 0x7fc <__floatsisf+0x48>
 7f8:	96 e9       	ldi	r25, 0x96	; 150
 7fa:	11 c0       	rjmp	.+34     	; 0x81e <__floatsisf+0x6a>
 7fc:	77 23       	and	r23, r23
 7fe:	21 f0       	breq	.+8      	; 0x808 <__floatsisf+0x54>
 800:	9e e8       	ldi	r25, 0x8E	; 142
 802:	87 2f       	mov	r24, r23
 804:	76 2f       	mov	r23, r22
 806:	05 c0       	rjmp	.+10     	; 0x812 <__floatsisf+0x5e>
 808:	66 23       	and	r22, r22
 80a:	71 f0       	breq	.+28     	; 0x828 <__floatsisf+0x74>
 80c:	96 e8       	ldi	r25, 0x86	; 134
 80e:	86 2f       	mov	r24, r22
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	2a f0       	brmi	.+10     	; 0x820 <__floatsisf+0x6c>
 816:	9a 95       	dec	r25
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	da f7       	brpl	.-10     	; 0x816 <__floatsisf+0x62>
 820:	88 0f       	add	r24, r24
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret

0000082a <__fp_split3>:
 82a:	57 fd       	sbrc	r21, 7
 82c:	90 58       	subi	r25, 0x80	; 128
 82e:	44 0f       	add	r20, r20
 830:	55 1f       	adc	r21, r21
 832:	59 f0       	breq	.+22     	; 0x84a <__fp_splitA+0x10>
 834:	5f 3f       	cpi	r21, 0xFF	; 255
 836:	71 f0       	breq	.+28     	; 0x854 <__fp_splitA+0x1a>
 838:	47 95       	ror	r20

0000083a <__fp_splitA>:
 83a:	88 0f       	add	r24, r24
 83c:	97 fb       	bst	r25, 7
 83e:	99 1f       	adc	r25, r25
 840:	61 f0       	breq	.+24     	; 0x85a <__fp_splitA+0x20>
 842:	9f 3f       	cpi	r25, 0xFF	; 255
 844:	79 f0       	breq	.+30     	; 0x864 <__stack+0x5>
 846:	87 95       	ror	r24
 848:	08 95       	ret
 84a:	12 16       	cp	r1, r18
 84c:	13 06       	cpc	r1, r19
 84e:	14 06       	cpc	r1, r20
 850:	55 1f       	adc	r21, r21
 852:	f2 cf       	rjmp	.-28     	; 0x838 <__fp_split3+0xe>
 854:	46 95       	lsr	r20
 856:	f1 df       	rcall	.-30     	; 0x83a <__fp_splitA>
 858:	08 c0       	rjmp	.+16     	; 0x86a <__stack+0xb>
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	99 1f       	adc	r25, r25
 862:	f1 cf       	rjmp	.-30     	; 0x846 <__fp_splitA+0xc>
 864:	86 95       	lsr	r24
 866:	71 05       	cpc	r23, r1
 868:	61 05       	cpc	r22, r1
 86a:	08 94       	sec
 86c:	08 95       	ret

0000086e <__fp_zero>:
 86e:	e8 94       	clt

00000870 <__fp_szero>:
 870:	bb 27       	eor	r27, r27
 872:	66 27       	eor	r22, r22
 874:	77 27       	eor	r23, r23
 876:	cb 01       	movw	r24, r22
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret

0000087c <__mulsf3>:
 87c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3x>
 880:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_round>
 884:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_pscA>
 888:	38 f0       	brcs	.+14     	; 0x898 <__mulsf3+0x1c>
 88a:	0e 94 bb 04 	call	0x976	; 0x976 <__fp_pscB>
 88e:	20 f0       	brcs	.+8      	; 0x898 <__mulsf3+0x1c>
 890:	95 23       	and	r25, r21
 892:	11 f0       	breq	.+4      	; 0x898 <__mulsf3+0x1c>
 894:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_inf>
 898:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_nan>
 89c:	11 24       	eor	r1, r1
 89e:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>

000008a2 <__mulsf3x>:
 8a2:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_split3>
 8a6:	70 f3       	brcs	.-36     	; 0x884 <__mulsf3+0x8>

000008a8 <__mulsf3_pse>:
 8a8:	95 9f       	mul	r25, r21
 8aa:	c1 f3       	breq	.-16     	; 0x89c <__mulsf3+0x20>
 8ac:	95 0f       	add	r25, r21
 8ae:	50 e0       	ldi	r21, 0x00	; 0
 8b0:	55 1f       	adc	r21, r21
 8b2:	62 9f       	mul	r22, r18
 8b4:	f0 01       	movw	r30, r0
 8b6:	72 9f       	mul	r23, r18
 8b8:	bb 27       	eor	r27, r27
 8ba:	f0 0d       	add	r31, r0
 8bc:	b1 1d       	adc	r27, r1
 8be:	63 9f       	mul	r22, r19
 8c0:	aa 27       	eor	r26, r26
 8c2:	f0 0d       	add	r31, r0
 8c4:	b1 1d       	adc	r27, r1
 8c6:	aa 1f       	adc	r26, r26
 8c8:	64 9f       	mul	r22, r20
 8ca:	66 27       	eor	r22, r22
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	66 1f       	adc	r22, r22
 8d2:	82 9f       	mul	r24, r18
 8d4:	22 27       	eor	r18, r18
 8d6:	b0 0d       	add	r27, r0
 8d8:	a1 1d       	adc	r26, r1
 8da:	62 1f       	adc	r22, r18
 8dc:	73 9f       	mul	r23, r19
 8de:	b0 0d       	add	r27, r0
 8e0:	a1 1d       	adc	r26, r1
 8e2:	62 1f       	adc	r22, r18
 8e4:	83 9f       	mul	r24, r19
 8e6:	a0 0d       	add	r26, r0
 8e8:	61 1d       	adc	r22, r1
 8ea:	22 1f       	adc	r18, r18
 8ec:	74 9f       	mul	r23, r20
 8ee:	33 27       	eor	r19, r19
 8f0:	a0 0d       	add	r26, r0
 8f2:	61 1d       	adc	r22, r1
 8f4:	23 1f       	adc	r18, r19
 8f6:	84 9f       	mul	r24, r20
 8f8:	60 0d       	add	r22, r0
 8fa:	21 1d       	adc	r18, r1
 8fc:	82 2f       	mov	r24, r18
 8fe:	76 2f       	mov	r23, r22
 900:	6a 2f       	mov	r22, r26
 902:	11 24       	eor	r1, r1
 904:	9f 57       	subi	r25, 0x7F	; 127
 906:	50 40       	sbci	r21, 0x00	; 0
 908:	9a f0       	brmi	.+38     	; 0x930 <__mulsf3_pse+0x88>
 90a:	f1 f0       	breq	.+60     	; 0x948 <__mulsf3_pse+0xa0>
 90c:	88 23       	and	r24, r24
 90e:	4a f0       	brmi	.+18     	; 0x922 <__mulsf3_pse+0x7a>
 910:	ee 0f       	add	r30, r30
 912:	ff 1f       	adc	r31, r31
 914:	bb 1f       	adc	r27, r27
 916:	66 1f       	adc	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	91 50       	subi	r25, 0x01	; 1
 91e:	50 40       	sbci	r21, 0x00	; 0
 920:	a9 f7       	brne	.-22     	; 0x90c <__mulsf3_pse+0x64>
 922:	9e 3f       	cpi	r25, 0xFE	; 254
 924:	51 05       	cpc	r21, r1
 926:	80 f0       	brcs	.+32     	; 0x948 <__mulsf3_pse+0xa0>
 928:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_inf>
 92c:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>
 930:	5f 3f       	cpi	r21, 0xFF	; 255
 932:	e4 f3       	brlt	.-8      	; 0x92c <__mulsf3_pse+0x84>
 934:	98 3e       	cpi	r25, 0xE8	; 232
 936:	d4 f3       	brlt	.-12     	; 0x92c <__mulsf3_pse+0x84>
 938:	86 95       	lsr	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b7 95       	ror	r27
 940:	f7 95       	ror	r31
 942:	e7 95       	ror	r30
 944:	9f 5f       	subi	r25, 0xFF	; 255
 946:	c1 f7       	brne	.-16     	; 0x938 <__mulsf3_pse+0x90>
 948:	fe 2b       	or	r31, r30
 94a:	88 0f       	add	r24, r24
 94c:	91 1d       	adc	r25, r1
 94e:	96 95       	lsr	r25
 950:	87 95       	ror	r24
 952:	97 f9       	bld	r25, 7
 954:	08 95       	ret

00000956 <__fp_inf>:
 956:	97 f9       	bld	r25, 7
 958:	9f 67       	ori	r25, 0x7F	; 127
 95a:	80 e8       	ldi	r24, 0x80	; 128
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	08 95       	ret

00000962 <__fp_nan>:
 962:	9f ef       	ldi	r25, 0xFF	; 255
 964:	80 ec       	ldi	r24, 0xC0	; 192
 966:	08 95       	ret

00000968 <__fp_pscA>:
 968:	00 24       	eor	r0, r0
 96a:	0a 94       	dec	r0
 96c:	16 16       	cp	r1, r22
 96e:	17 06       	cpc	r1, r23
 970:	18 06       	cpc	r1, r24
 972:	09 06       	cpc	r0, r25
 974:	08 95       	ret

00000976 <__fp_pscB>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	12 16       	cp	r1, r18
 97c:	13 06       	cpc	r1, r19
 97e:	14 06       	cpc	r1, r20
 980:	05 06       	cpc	r0, r21
 982:	08 95       	ret

00000984 <__fp_round>:
 984:	09 2e       	mov	r0, r25
 986:	03 94       	inc	r0
 988:	00 0c       	add	r0, r0
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0xc>
 98c:	88 23       	and	r24, r24
 98e:	52 f0       	brmi	.+20     	; 0x9a4 <__fp_round+0x20>
 990:	bb 0f       	add	r27, r27
 992:	40 f4       	brcc	.+16     	; 0x9a4 <__fp_round+0x20>
 994:	bf 2b       	or	r27, r31
 996:	11 f4       	brne	.+4      	; 0x99c <__fp_round+0x18>
 998:	60 ff       	sbrs	r22, 0
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <__fp_round+0x20>
 99c:	6f 5f       	subi	r22, 0xFF	; 255
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	08 95       	ret

000009a6 <__tablejump2__>:
 9a6:	ee 0f       	add	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	05 90       	lpm	r0, Z+
 9ac:	f4 91       	lpm	r31, Z
 9ae:	e0 2d       	mov	r30, r0
 9b0:	09 94       	ijmp

000009b2 <_exit>:
 9b2:	f8 94       	cli

000009b4 <__stop_program>:
 9b4:	ff cf       	rjmp	.-2      	; 0x9b4 <__stop_program>
