
LEDMRX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ba  008000ba  00000652  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112b  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008df  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080d  00000000  00000000  000021b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000029c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064f  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0c  00000000  00000000  000031f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003dff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3b       	cpi	r26, 0xBB	; 187
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 94 02 	call	0x528	; 0x528 <main>
  8a:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Init>:
		break;
		case PC:
			TOOGLE_BIT(PORTC,PinNum_InPort);
		break;
		case PD:
			TOOGLE_BIT(PORTD,PinNum_InPort);
  92:	e9 e9       	ldi	r30, 0x99	; 153
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	91 91       	ld	r25, Z+
  9e:	28 2f       	mov	r18, r24
  a0:	26 95       	lsr	r18
  a2:	26 95       	lsr	r18
  a4:	26 95       	lsr	r18
  a6:	38 2f       	mov	r19, r24
  a8:	37 70       	andi	r19, 0x07	; 7
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	c9 f1       	breq	.+114    	; 0x120 <DIO_Init+0x8e>
  ae:	20 f0       	brcs	.+8      	; 0xb8 <DIO_Init+0x26>
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_Init+0x24>
  b4:	7d c0       	rjmp	.+250    	; 0x1b0 <DIO_Init+0x11e>
  b6:	bf c0       	rjmp	.+382    	; 0x236 <DIO_Init+0x1a4>
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	89 f0       	breq	.+34     	; 0xde <DIO_Init+0x4c>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_Init+0x36>
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	c9 f0       	breq	.+50     	; 0xf4 <DIO_Init+0x62>
  c2:	23 30       	cpi	r18, 0x03	; 3
  c4:	11 f1       	breq	.+68     	; 0x10a <DIO_Init+0x78>
  c6:	b7 c0       	rjmp	.+366    	; 0x236 <DIO_Init+0x1a4>
  c8:	9a b3       	in	r25, 0x1a	; 26
  ca:	ba 01       	movw	r22, r20
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_Init+0x40>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	3a 95       	dec	r19
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_Init+0x3c>
  d6:	9b 01       	movw	r18, r22
  d8:	29 2b       	or	r18, r25
  da:	2a bb       	out	0x1a, r18	; 26
  dc:	ac c0       	rjmp	.+344    	; 0x236 <DIO_Init+0x1a4>
  de:	97 b3       	in	r25, 0x17	; 23
  e0:	ba 01       	movw	r22, r20
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_Init+0x56>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	3a 95       	dec	r19
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_Init+0x52>
  ec:	9b 01       	movw	r18, r22
  ee:	29 2b       	or	r18, r25
  f0:	27 bb       	out	0x17, r18	; 23
  f2:	a1 c0       	rjmp	.+322    	; 0x236 <DIO_Init+0x1a4>
  f4:	94 b3       	in	r25, 0x14	; 20
  f6:	ba 01       	movw	r22, r20
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_Init+0x6c>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	3a 95       	dec	r19
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_Init+0x68>
 102:	9b 01       	movw	r18, r22
 104:	29 2b       	or	r18, r25
 106:	24 bb       	out	0x14, r18	; 20
 108:	96 c0       	rjmp	.+300    	; 0x236 <DIO_Init+0x1a4>
 10a:	91 b3       	in	r25, 0x11	; 17
 10c:	ba 01       	movw	r22, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_Init+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	3a 95       	dec	r19
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_Init+0x7e>
 118:	9b 01       	movw	r18, r22
 11a:	29 2b       	or	r18, r25
 11c:	21 bb       	out	0x11, r18	; 17
 11e:	8b c0       	rjmp	.+278    	; 0x236 <DIO_Init+0x1a4>
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	b1 f0       	breq	.+44     	; 0x150 <DIO_Init+0xbe>
 124:	28 f0       	brcs	.+10     	; 0x130 <DIO_Init+0x9e>
 126:	22 30       	cpi	r18, 0x02	; 2
 128:	19 f1       	breq	.+70     	; 0x170 <DIO_Init+0xde>
 12a:	23 30       	cpi	r18, 0x03	; 3
 12c:	89 f1       	breq	.+98     	; 0x190 <DIO_Init+0xfe>
 12e:	83 c0       	rjmp	.+262    	; 0x236 <DIO_Init+0x1a4>
 130:	9a b3       	in	r25, 0x1a	; 26
 132:	ba 01       	movw	r22, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_Init+0xa8>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	3a 95       	dec	r19
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_Init+0xa4>
 13e:	9b 01       	movw	r18, r22
 140:	36 2f       	mov	r19, r22
 142:	30 95       	com	r19
 144:	93 23       	and	r25, r19
 146:	9a bb       	out	0x1a, r25	; 26
 148:	9b b3       	in	r25, 0x1b	; 27
 14a:	29 2b       	or	r18, r25
 14c:	2b bb       	out	0x1b, r18	; 27
 14e:	73 c0       	rjmp	.+230    	; 0x236 <DIO_Init+0x1a4>
 150:	97 b3       	in	r25, 0x17	; 23
 152:	ba 01       	movw	r22, r20
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_Init+0xc8>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	3a 95       	dec	r19
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_Init+0xc4>
 15e:	9b 01       	movw	r18, r22
 160:	36 2f       	mov	r19, r22
 162:	30 95       	com	r19
 164:	93 23       	and	r25, r19
 166:	97 bb       	out	0x17, r25	; 23
 168:	98 b3       	in	r25, 0x18	; 24
 16a:	29 2b       	or	r18, r25
 16c:	28 bb       	out	0x18, r18	; 24
 16e:	63 c0       	rjmp	.+198    	; 0x236 <DIO_Init+0x1a4>
 170:	94 b3       	in	r25, 0x14	; 20
 172:	ba 01       	movw	r22, r20
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_Init+0xe8>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	3a 95       	dec	r19
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_Init+0xe4>
 17e:	9b 01       	movw	r18, r22
 180:	36 2f       	mov	r19, r22
 182:	30 95       	com	r19
 184:	93 23       	and	r25, r19
 186:	94 bb       	out	0x14, r25	; 20
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	29 2b       	or	r18, r25
 18c:	25 bb       	out	0x15, r18	; 21
 18e:	53 c0       	rjmp	.+166    	; 0x236 <DIO_Init+0x1a4>
 190:	91 b3       	in	r25, 0x11	; 17
 192:	ba 01       	movw	r22, r20
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_Init+0x108>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	3a 95       	dec	r19
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_Init+0x104>
 19e:	9b 01       	movw	r18, r22
 1a0:	36 2f       	mov	r19, r22
 1a2:	30 95       	com	r19
 1a4:	93 23       	and	r25, r19
 1a6:	91 bb       	out	0x11, r25	; 17
 1a8:	92 b3       	in	r25, 0x12	; 18
 1aa:	29 2b       	or	r18, r25
 1ac:	22 bb       	out	0x12, r18	; 18
 1ae:	43 c0       	rjmp	.+134    	; 0x236 <DIO_Init+0x1a4>
 1b0:	21 30       	cpi	r18, 0x01	; 1
 1b2:	a9 f0       	breq	.+42     	; 0x1de <DIO_Init+0x14c>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <DIO_Init+0x12e>
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	09 f1       	breq	.+66     	; 0x1fc <DIO_Init+0x16a>
 1ba:	23 30       	cpi	r18, 0x03	; 3
 1bc:	71 f1       	breq	.+92     	; 0x21a <DIO_Init+0x188>
 1be:	3b c0       	rjmp	.+118    	; 0x236 <DIO_Init+0x1a4>
 1c0:	9a b3       	in	r25, 0x1a	; 26
 1c2:	ba 01       	movw	r22, r20
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_Init+0x138>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	3a 95       	dec	r19
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_Init+0x134>
 1ce:	9b 01       	movw	r18, r22
 1d0:	20 95       	com	r18
 1d2:	92 23       	and	r25, r18
 1d4:	9a bb       	out	0x1a, r25	; 26
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	29 23       	and	r18, r25
 1da:	2b bb       	out	0x1b, r18	; 27
 1dc:	2c c0       	rjmp	.+88     	; 0x236 <DIO_Init+0x1a4>
 1de:	97 b3       	in	r25, 0x17	; 23
 1e0:	ba 01       	movw	r22, r20
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_Init+0x156>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	3a 95       	dec	r19
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_Init+0x152>
 1ec:	9b 01       	movw	r18, r22
 1ee:	20 95       	com	r18
 1f0:	92 23       	and	r25, r18
 1f2:	97 bb       	out	0x17, r25	; 23
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	29 23       	and	r18, r25
 1f8:	28 bb       	out	0x18, r18	; 24
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <DIO_Init+0x1a4>
 1fc:	94 b3       	in	r25, 0x14	; 20
 1fe:	ba 01       	movw	r22, r20
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_Init+0x174>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	3a 95       	dec	r19
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_Init+0x170>
 20a:	9b 01       	movw	r18, r22
 20c:	20 95       	com	r18
 20e:	92 23       	and	r25, r18
 210:	94 bb       	out	0x14, r25	; 20
 212:	95 b3       	in	r25, 0x15	; 21
 214:	29 23       	and	r18, r25
 216:	25 bb       	out	0x15, r18	; 21
 218:	0e c0       	rjmp	.+28     	; 0x236 <DIO_Init+0x1a4>
 21a:	91 b3       	in	r25, 0x11	; 17
 21c:	ba 01       	movw	r22, r20
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_Init+0x192>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	3a 95       	dec	r19
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_Init+0x18e>
 228:	9b 01       	movw	r18, r22
 22a:	20 95       	com	r18
 22c:	92 23       	and	r25, r18
 22e:	91 bb       	out	0x11, r25	; 17
 230:	92 b3       	in	r25, 0x12	; 18
 232:	29 23       	and	r18, r25
 234:	22 bb       	out	0x12, r18	; 18
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 32       	cpi	r24, 0x20	; 32
 23a:	09 f0       	breq	.+2      	; 0x23e <DIO_Init+0x1ac>
 23c:	2f cf       	rjmp	.-418    	; 0x9c <DIO_Init+0xa>
 23e:	08 95       	ret

00000240 <DIO_WritePin>:
 240:	98 2f       	mov	r25, r24
 242:	97 70       	andi	r25, 0x07	; 7
 244:	86 95       	lsr	r24
 246:	86 95       	lsr	r24
 248:	86 95       	lsr	r24
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	21 f1       	breq	.+72     	; 0x296 <DIO_WritePin+0x56>
 24e:	30 f0       	brcs	.+12     	; 0x25c <DIO_WritePin+0x1c>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	f1 f1       	breq	.+124    	; 0x2d0 <DIO_WritePin+0x90>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_WritePin+0x1a>
 258:	58 c0       	rjmp	.+176    	; 0x30a <DIO_WritePin+0xca>
 25a:	08 95       	ret
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	69 f4       	brne	.+26     	; 0x27a <DIO_WritePin+0x3a>
 260:	4b b3       	in	r20, 0x1b	; 27
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_WritePin+0x2e>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	9a 95       	dec	r25
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_WritePin+0x2a>
 272:	cb 01       	movw	r24, r22
 274:	84 2b       	or	r24, r20
 276:	8b bb       	out	0x1b, r24	; 27
 278:	08 95       	ret
 27a:	4b b3       	in	r20, 0x1b	; 27
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_WritePin+0x48>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	9a 95       	dec	r25
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_WritePin+0x44>
 28c:	cb 01       	movw	r24, r22
 28e:	80 95       	com	r24
 290:	84 23       	and	r24, r20
 292:	8b bb       	out	0x1b, r24	; 27
 294:	08 95       	ret
 296:	61 30       	cpi	r22, 0x01	; 1
 298:	69 f4       	brne	.+26     	; 0x2b4 <DIO_WritePin+0x74>
 29a:	48 b3       	in	r20, 0x18	; 24
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_WritePin+0x68>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	9a 95       	dec	r25
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_WritePin+0x64>
 2ac:	cb 01       	movw	r24, r22
 2ae:	84 2b       	or	r24, r20
 2b0:	88 bb       	out	0x18, r24	; 24
 2b2:	08 95       	ret
 2b4:	48 b3       	in	r20, 0x18	; 24
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	b9 01       	movw	r22, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_WritePin+0x82>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	9a 95       	dec	r25
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_WritePin+0x7e>
 2c6:	cb 01       	movw	r24, r22
 2c8:	80 95       	com	r24
 2ca:	84 23       	and	r24, r20
 2cc:	88 bb       	out	0x18, r24	; 24
 2ce:	08 95       	ret
 2d0:	61 30       	cpi	r22, 0x01	; 1
 2d2:	69 f4       	brne	.+26     	; 0x2ee <DIO_WritePin+0xae>
 2d4:	45 b3       	in	r20, 0x15	; 21
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_WritePin+0xa2>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	9a 95       	dec	r25
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_WritePin+0x9e>
 2e6:	cb 01       	movw	r24, r22
 2e8:	84 2b       	or	r24, r20
 2ea:	85 bb       	out	0x15, r24	; 21
 2ec:	08 95       	ret
 2ee:	45 b3       	in	r20, 0x15	; 21
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_WritePin+0xbc>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	9a 95       	dec	r25
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_WritePin+0xb8>
 300:	cb 01       	movw	r24, r22
 302:	80 95       	com	r24
 304:	84 23       	and	r24, r20
 306:	85 bb       	out	0x15, r24	; 21
 308:	08 95       	ret
 30a:	61 30       	cpi	r22, 0x01	; 1
 30c:	69 f4       	brne	.+26     	; 0x328 <DIO_WritePin+0xe8>
 30e:	42 b3       	in	r20, 0x12	; 18
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	b9 01       	movw	r22, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_WritePin+0xdc>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	9a 95       	dec	r25
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_WritePin+0xd8>
 320:	cb 01       	movw	r24, r22
 322:	84 2b       	or	r24, r20
 324:	82 bb       	out	0x12, r24	; 18
 326:	08 95       	ret
 328:	42 b3       	in	r20, 0x12	; 18
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	b9 01       	movw	r22, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_WritePin+0xf6>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	9a 95       	dec	r25
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_WritePin+0xf2>
 33a:	cb 01       	movw	r24, r22
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	82 bb       	out	0x12, r24	; 18
 342:	08 95       	ret

00000344 <DIO_ReadPin>:
		break;
	}
}
VoltageLevel_type DIO_ReadPin(PinNum_type Pin)
{
	u8 PinNum_InPort=Pin%8;
 344:	28 2f       	mov	r18, r24
 346:	27 70       	andi	r18, 0x07	; 7
	Port_type Port=Pin/8;
	switch (Port)
 348:	86 95       	lsr	r24
 34a:	86 95       	lsr	r24
 34c:	86 95       	lsr	r24
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	79 f0       	breq	.+30     	; 0x370 <DIO_ReadPin+0x2c>
 352:	28 f0       	brcs	.+10     	; 0x35e <DIO_ReadPin+0x1a>
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	a9 f0       	breq	.+42     	; 0x382 <DIO_ReadPin+0x3e>
 358:	83 30       	cpi	r24, 0x03	; 3
 35a:	e1 f0       	breq	.+56     	; 0x394 <DIO_ReadPin+0x50>
 35c:	24 c0       	rjmp	.+72     	; 0x3a6 <DIO_ReadPin+0x62>
	{
		case PA:
		return CHECK_BIT(PINA,PinNum_InPort);
 35e:	89 b3       	in	r24, 0x19	; 25
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_ReadPin+0x24>
 364:	95 95       	asr	r25
 366:	87 95       	ror	r24
 368:	2a 95       	dec	r18
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_ReadPin+0x20>
 36c:	81 70       	andi	r24, 0x01	; 1
 36e:	08 95       	ret
		break;
		case PB:
		return CHECK_BIT(PINB,PinNum_InPort);
 370:	86 b3       	in	r24, 0x16	; 22
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_ReadPin+0x36>
 376:	95 95       	asr	r25
 378:	87 95       	ror	r24
 37a:	2a 95       	dec	r18
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_ReadPin+0x32>
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	08 95       	ret
		break;
		case PC:
		return CHECK_BIT(PINC,PinNum_InPort);
 382:	83 b3       	in	r24, 0x13	; 19
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_ReadPin+0x48>
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_ReadPin+0x44>
 390:	81 70       	andi	r24, 0x01	; 1
 392:	08 95       	ret
		break;
		case PD:
		return CHECK_BIT(PIND,PinNum_InPort);
 394:	80 b3       	in	r24, 0x10	; 16
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_ReadPin+0x5a>
 39a:	95 95       	asr	r25
 39c:	87 95       	ror	r24
 39e:	2a 95       	dec	r18
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_ReadPin+0x56>
 3a2:	81 70       	andi	r24, 0x01	; 1
 3a4:	08 95       	ret
		break;
		default:
		return 0x00;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
}
 3a8:	08 95       	ret

000003aa <DisableALLCols>:
			SetRowValues(Copy_u8Data[i]);
			DIO_WritePin(cols[i] ,LOW);
			_delay_us(1000);
		}
	
}
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	c1 e6       	ldi	r28, 0x61	; 97
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	09 e6       	ldi	r16, 0x69	; 105
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	89 91       	ld	r24, Y+
 3be:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WritePin>
 3c2:	c0 17       	cp	r28, r16
 3c4:	d1 07       	cpc	r29, r17
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <DisableALLCols+0x10>
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <SetRowValues>:
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	09 e6       	ldi	r16, 0x69	; 105
 3e0:	10 e0       	ldi	r17, 0x00	; 0
 3e2:	c0 e0       	ldi	r28, 0x00	; 0
 3e4:	d0 e0       	ldi	r29, 0x00	; 0
 3e6:	e8 2e       	mov	r14, r24
 3e8:	f1 2c       	mov	r15, r1
 3ea:	b7 01       	movw	r22, r14
 3ec:	0c 2e       	mov	r0, r28
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <SetRowValues+0x22>
 3f0:	75 95       	asr	r23
 3f2:	67 95       	ror	r22
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <SetRowValues+0x1e>
 3f8:	61 70       	andi	r22, 0x01	; 1
 3fa:	f8 01       	movw	r30, r16
 3fc:	81 91       	ld	r24, Z+
 3fe:	8f 01       	movw	r16, r30
 400:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WritePin>
 404:	21 96       	adiw	r28, 0x01	; 1
 406:	c8 30       	cpi	r28, 0x08	; 8
 408:	d1 05       	cpc	r29, r1
 40a:	79 f7       	brne	.-34     	; 0x3ea <SetRowValues+0x18>
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	08 95       	ret

0000041a <LEDMRX_voidInit>:
 41a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Init>
 41e:	08 95       	ret

00000420 <LEDMRX_voidAnimation>:
		Local_u8BIT=CHECK_BIT(Copy_u8Value,k);
		DIO_WritePin(rows[k], Local_u8BIT);
	}
}
void LEDMRX_voidAnimation(u8 *Copy_u8Data) 
{
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	28 97       	sbiw	r28, 0x08	; 8
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	4c 01       	movw	r8, r24
 44a:	0f 2e       	mov	r0, r31
 44c:	fe e1       	ldi	r31, 0x1E	; 30
 44e:	af 2e       	mov	r10, r31
 450:	f0 2d       	mov	r31, r0
 452:	6e 01       	movw	r12, r28
 454:	89 e0       	ldi	r24, 0x09	; 9
 456:	c8 0e       	add	r12, r24
 458:	d1 1c       	adc	r13, r1

	u8 index = 0;
		
        for(index =0 ; index<30 ; ++index)
	    {
		while(No_Animation);
 45a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
 45e:	81 11       	cpse	r24, r1
 460:	fc cf       	rjmp	.-8      	; 0x45a <LEDMRX_voidAnimation+0x3a>
		u8 Local_u8TempData[8]={Copy_u8Data[index],Copy_u8Data[index+1],Copy_u8Data[index+2],Copy_u8Data[index+3],Copy_u8Data[index+4],
 462:	f4 01       	movw	r30, r8
 464:	80 81       	ld	r24, Z
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	81 81       	ldd	r24, Z+1	; 0x01
 46a:	8a 83       	std	Y+2, r24	; 0x02
 46c:	82 81       	ldd	r24, Z+2	; 0x02
 46e:	8b 83       	std	Y+3, r24	; 0x03
 470:	83 81       	ldd	r24, Z+3	; 0x03
 472:	8c 83       	std	Y+4, r24	; 0x04
 474:	84 81       	ldd	r24, Z+4	; 0x04
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	85 81       	ldd	r24, Z+5	; 0x05
 47a:	8e 83       	std	Y+6, r24	; 0x06
 47c:	86 81       	ldd	r24, Z+6	; 0x06
 47e:	8f 83       	std	Y+7, r24	; 0x07
 480:	87 81       	ldd	r24, Z+7	; 0x07
 482:	88 87       	std	Y+8, r24	; 0x08
							    Copy_u8Data[index+5],Copy_u8Data[index+6],Copy_u8Data[index+7]};
		    for(u8 w=0; w<Waiting; ++w)
 484:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Waiting>
 488:	81 11       	cpse	r24, r1
 48a:	1d c0       	rjmp	.+58     	; 0x4c6 <LEDMRX_voidAnimation+0xa6>
 48c:	27 c0       	rjmp	.+78     	; 0x4dc <LEDMRX_voidAnimation+0xbc>
		    {
			    for(u8 i=0; i<=7; ++i)
				{
			        DisableALLCols();
 48e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DisableALLCols>
					SetRowValues(Local_u8TempData[i]);
 492:	f8 01       	movw	r30, r16
 494:	81 91       	ld	r24, Z+
 496:	8f 01       	movw	r16, r30
 498:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SetRowValues>
					DIO_WritePin(cols[i] , LOW);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	f7 01       	movw	r30, r14
 4a0:	81 91       	ld	r24, Z+
 4a2:	7f 01       	movw	r14, r30
 4a4:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a8:	89 ef       	ldi	r24, 0xF9	; 249
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LEDMRX_voidAnimation+0x8c>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LEDMRX_voidAnimation+0x92>
 4b2:	00 00       	nop
		while(No_Animation);
		u8 Local_u8TempData[8]={Copy_u8Data[index],Copy_u8Data[index+1],Copy_u8Data[index+2],Copy_u8Data[index+3],Copy_u8Data[index+4],
							    Copy_u8Data[index+5],Copy_u8Data[index+6],Copy_u8Data[index+7]};
		    for(u8 w=0; w<Waiting; ++w)
		    {
			    for(u8 i=0; i<=7; ++i)
 4b4:	c0 16       	cp	r12, r16
 4b6:	d1 06       	cpc	r13, r17
 4b8:	51 f7       	brne	.-44     	; 0x48e <LEDMRX_voidAnimation+0x6e>
        for(index =0 ; index<30 ; ++index)
	    {
		while(No_Animation);
		u8 Local_u8TempData[8]={Copy_u8Data[index],Copy_u8Data[index+1],Copy_u8Data[index+2],Copy_u8Data[index+3],Copy_u8Data[index+4],
							    Copy_u8Data[index+5],Copy_u8Data[index+6],Copy_u8Data[index+7]};
		    for(u8 w=0; w<Waiting; ++w)
 4ba:	b3 94       	inc	r11
 4bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Waiting>
 4c0:	b8 16       	cp	r11, r24
 4c2:	10 f0       	brcs	.+4      	; 0x4c8 <LEDMRX_voidAnimation+0xa8>
 4c4:	0b c0       	rjmp	.+22     	; 0x4dc <LEDMRX_voidAnimation+0xbc>
 4c6:	b1 2c       	mov	r11, r1
 4c8:	8e 01       	movw	r16, r28
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	0f 2e       	mov	r0, r31
 4d0:	f1 e6       	ldi	r31, 0x61	; 97
 4d2:	ef 2e       	mov	r14, r31
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	ff 2e       	mov	r15, r31
 4d8:	f0 2d       	mov	r31, r0
 4da:	d9 cf       	rjmp	.-78     	; 0x48e <LEDMRX_voidAnimation+0x6e>
 4dc:	aa 94       	dec	r10
 4de:	9f ef       	ldi	r25, 0xFF	; 255
 4e0:	89 1a       	sub	r8, r25
 4e2:	99 0a       	sbc	r9, r25
void LEDMRX_voidAnimation(u8 *Copy_u8Data) 
{

	u8 index = 0;
		
        for(index =0 ; index<30 ; ++index)
 4e4:	a1 10       	cpse	r10, r1
 4e6:	b9 cf       	rjmp	.-142    	; 0x45a <LEDMRX_voidAnimation+0x3a>
		    }
			
			
	    }
    
}
 4e8:	28 96       	adiw	r28, 0x08	; 8
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	ff 90       	pop	r15
 4fe:	ef 90       	pop	r14
 500:	df 90       	pop	r13
 502:	cf 90       	pop	r12
 504:	bf 90       	pop	r11
 506:	af 90       	pop	r10
 508:	9f 90       	pop	r9
 50a:	8f 90       	pop	r8
 50c:	08 95       	ret

0000050e <LEDMRX_voidResumeAnimation>:

void LEDMRX_voidResumeAnimation(void)
{
	No_Animation = 0;
 50e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__data_end>
 512:	08 95       	ret

00000514 <LEDMRX_voidStopAnimation>:
}
void LEDMRX_voidStopAnimation(void)
{
	No_Animation = 1;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
 51a:	08 95       	ret

0000051c <LEDMRX_voidSpeedUp>:
}
void LEDMRX_voidSpeedUp(void)
{
	Waiting = Waiting - 2;
 51c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Waiting>
 520:	82 50       	subi	r24, 0x02	; 2
 522:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Waiting>
 526:	08 95       	ret

00000528 <main>:
	
u8 name[] = {0,0,24,36,36,24,0,0,  0,0,50,42,38,0,0,0,  0,124,18,18,18,124,0,0, 0,0,28,2,30,2,28,0, 0,124,18,18,18,124,0,0};

int main(void)
{
    LEDMRX_voidInit();
 528:	0e 94 0d 02 	call	0x41a	; 0x41a <LEDMRX_voidInit>

	
    while (1) 
    {
		
			LEDMRX_voidAnimation(name);
 52c:	81 e7       	ldi	r24, 0x71	; 113
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 10 02 	call	0x420	; 0x420 <LEDMRX_voidAnimation>
		
			
			if (DIO_ReadPin(PINC0) == 1)
 534:	80 e1       	ldi	r24, 0x10	; 16
 536:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_ReadPin>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	11 f4       	brne	.+4      	; 0x542 <main+0x1a>
			{
				LEDMRX_voidStopAnimation();
 53e:	0e 94 8a 02 	call	0x514	; 0x514 <LEDMRX_voidStopAnimation>
			}
		    if (DIO_ReadPin(PINC1) == 1)
 542:	81 e1       	ldi	r24, 0x11	; 17
 544:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_ReadPin>
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	11 f4       	brne	.+4      	; 0x550 <main+0x28>
			{
				LEDMRX_voidResumeAnimation();
 54c:	0e 94 87 02 	call	0x50e	; 0x50e <LEDMRX_voidResumeAnimation>
			}
		    if (DIO_ReadPin(PINC2) == 1)
 550:	82 e1       	ldi	r24, 0x12	; 18
 552:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_ReadPin>
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	49 f7       	brne	.-46     	; 0x52c <main+0x4>
			{
				LEDMRX_voidSpeedUp();
 55a:	0e 94 8e 02 	call	0x51c	; 0x51c <LEDMRX_voidSpeedUp>
 55e:	e6 cf       	rjmp	.-52     	; 0x52c <main+0x4>

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
